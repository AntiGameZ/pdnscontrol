#!/usr/bin/env python

from __future__ import print_function

from wsgiref.simple_server import make_server
from wsgiref.util import request_uri

import wsgissl
from BaseHTTPServer import BaseHTTPRequestHandler
import SocketServer
import base64
import ConfigParser
import urlparse
import urllib2
import json
import subprocess
import os
import collections
import sys
import logging
import logging.handlers
import signal
import platform

BECOME_ROOT = ['sudo', '-n']
START_STOP_RESTART_COMMANDS = ['start', 'stop', 'restart']
CONFIG = ConfigParser.ConfigParser()

Request = collections.namedtuple('Request', ['environ', 'args', 'path', 'method', 'body'])

HTTP_METHODS_WITH_BODY = ['PATCH', 'POST', 'PUT']

logger = logging.getLogger('Server')


class UpstreamServer(object):
    def __init__(self, config):
        config = dict(config)
        self.daemon_type = config['daemon_type'].lower()
        if self.daemon_type == 'recursor':
            self.package = 'pdns-recursor'
            self.service = 'pdns-recursor'
            self.url = 'http://localhost:8082'
        elif self.daemon_type == 'authoritative':
            self.package = 'pdns-server'
            self.service = 'pdns'
            self.url = 'http://localhost:8081'
        else:
            raise 'Unknown daemon_type %r' % self.daemon_type

        self.package = config.get('package', self.package)
        self.service = config.get('service', self.service)
        self.url = config.get('url', self.url)
        self.url = self.url.rstrip('/') # strip last /


def check_output(*popenargs, **kwargs):
    r"""Run command with arguments and return its output as a byte string.

    Backported from Python 2.7 as it's implemented as pure python on stdlib.
    from https://gist.github.com/1027906

    >>> check_output(['/usr/bin/python', '--version'])
    Python 2.6.2
    """
    process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
    output = process.communicate()[0]
    retcode = process.poll()
    if retcode:
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        error = subprocess.CalledProcessError(retcode, cmd)
        error.output = output
        raise error
    return output


class ExposedException(Exception):

    def __init__(self, message, status=500, headers=None):
        if message is None:
            message = BaseHTTPRequestHandler.responses[status][1]
        Exception.__init__(self, message)
        self.status = status
        self.headers = headers
        if headers is None:
            self.headers = []


class NotFoundException(ExposedException):

    def __init__(self):
        ExposedException.__init__(self, None, status=404)


class AuthenticationRequiredException(ExposedException):

    def __init__(self, www_auth):
        ExposedException.__init__(self, None, status=401, headers=[('WWW-Authenticate', www_auth)])


class Response(object):

    def __init__(self, content, content_type='text/plain', headers=None, status=200):
        self.content = content
        self.content_type = content_type
        self.headers = headers
        if self.headers is None:
            self.headers = []
        self.status = status

    def start(self, start_response):
        status = self.status
        if not isinstance(status, str):
            if status in BaseHTTPRequestHandler.responses:
                status = str(status) + ' ' + BaseHTTPRequestHandler.responses[status][1]
            elif status == 422:
                # known to not be in BaseHTTPRequestHandler.responses
                status = '422 Unprocessable Entity'
            else:
                status = str(status) + ' Unknown error'
        headers = [
            ('Content-Type', self.content_type),
            ('Access-Control-Allow-Origin', CONFIG.get('proxy', 'allow_origin')),
            ('Server', 'Manager/0')
            ] + self.headers
        start_response(status, headers)
        return [self.content]


class JSONResponse(Response):

    def __init__(self, data, callback=None, headers=None):
        content = json.dumps(data)
        content_type = 'application/json'
        if callback is not None:
            content_type = 'application/javascript'
            content = callback + '(' + content + ');'
        Response.__init__(self, content, content_type=content_type, headers=headers)


class ExceptionResponse(Response):

    def __init__(self, ex):
        Response.__init__(self, str(ex), status=ex.status, headers=ex.headers)


def run_proc(cmdline):
    status = {'success': True, 'cmdline': cmdline}
    try:
        status['output'] = check_output(cmdline, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as ex:
        status['success'] = False
        status['returncode'] = ex.returncode
        status['output'] = ex.output
    return status


def do_start_stop_restart(action):
    if not action in START_STOP_RESTART_COMMANDS:
        raise StandardError("Invalid action given")
    cmdline = BECOME_ROOT + ['service', UPSTREAM.service, action]
    return run_proc(cmdline)


def do_install_upgrade(version):
    PACKAGE_MANAGER.refresh()
    if version and len(version) == 0:
        version = None
    return PACKAGE_MANAGER.install_upgrade(UPSTREAM.package, version)


def handle_route_do(action, args):
    if action in START_STOP_RESTART_COMMANDS:
        return do_start_stop_restart(action)
    if action in ['install', 'upgrade']:
        version = args.get('version', [''])[0]
        return do_install_upgrade(version)

    raise ExposedException('unknown action')


def handle_route_servers(request):
    url = UPSTREAM.url + request.path + '?' + request.environ['QUERY_STRING']
    data = request.body if request.method in HTTP_METHODS_WITH_BODY else None

    try:
        conn = urllib2.urlopen(url, data, timeout=5)
        result = conn.read()
        conn.close()
    except urllib2.HTTPError as ex:
        raise ExposedException(ex.reason, status=ex.code)

    headers = ((k.lower().strip(), v.strip()) for (k, v) in [h.split(': ', 1) for h in conn.info().headers])
    content_type = [v for (k, v) in headers if k == 'content-type'][0]
    response = Response(result, content_type=content_type)

    return response


def authenticate(auth_data):
    expected_username = CONFIG.get('auth', 'username', None)
    expected_password = CONFIG.get('auth', 'password', None)
    if not expected_username or not expected_password:
        raise Exception('no username or password configured')

    if auth_data is None or ' ' not in auth_data:
        # no auth data supplied by client
        return False

    (client_method, client_credentials_encoded) = auth_data.split(' ', 2)
    if client_method != 'Basic':
        # unsupported auth method
        return False

    client_credentials = base64.b64decode(client_credentials_encoded)
    (client_username, client_password) = client_credentials.split(':', 2)
    if client_username == expected_username and client_password == expected_password:
        return True
    else:
        return False


def route(request):
    if not authenticate(request.environ.get('HTTP_AUTHORIZATION', '')):
        raise AuthenticationRequiredException('Basic realm="manager"')

    callback = request.args.get('_callback', [None])[0]

    if request.path == '/do':
        action = request.args.get('action', [None])[0]
        if action is None:
            raise NotFoundException()

        return JSONResponse(handle_route_do(action, request.args), callback=callback)

    elif request.path.startswith('/servers'):
        return handle_route_servers(request)

    else:
        raise NotFoundException()


def manager_app(environ, start_response):
    path = request_uri(environ)
    parsed_path = urlparse.urlparse(path)
    method = environ['REQUEST_METHOD']
    request_body = ''
    if method in HTTP_METHODS_WITH_BODY:
        request_body_size = int(environ['CONTENT_LENGTH'])
        request_body = str(environ['wsgi.input'].read(request_body_size))
        args = urlparse.parse_qs(request_body)
    else:
        args = urlparse.parse_qs(parsed_path.query)

    try:
        path = '/'.join([component for component in parsed_path.path.split('/') if component != ''])
        if '..' in path:
            raise NotFoundException()

        path = '/' + path
        request = Request(environ=environ, path=path, args=args, method=method, body=request_body)

        response = route(request)

    except ExposedException as ex:
        response = ExceptionResponse(ex)

    return response.start(start_response)


def format_address(client_address):
    return '%s:%s' % client_address


class PdnsmgrdRequestHandler(wsgissl.SecureWSGIRequestHandler):

    def address_string(self):
        """Override address_string to not resolve the client address."""
        return format_address(self.client_address)

    def log_request(self, code='-', size='-'):
        self.log_message_level(logging.INFO, 'REQUEST: "%s" %s %s',
                               self.requestline, str(code), str(size))

    def log_error(self, fmt, *args):
        """Log an error.

        This is called when a request cannot be fulfilled.  By
        default it passes the message on to log_message().

        Arguments are the same as for log_message().
        """
        self.log_message_level(logging.ERROR, fmt, args)

    def log_message(self, fmt, *args):
        """Log an arbitrary message.

        This is used by all other logging functions.  Override
        it if you have specific logging wishes.

        The first argument, FORMAT, is a format string for the
        message to be logged.  If the format string contains
        any % escapes requiring parameters, they should be
        specified as subsequent arguments (it's just like
        printf!).

        The client ip address and current date/time are prefixed to every
        message.

        """
        self.log_message_level(logging.WARNING, fmt, args)

    def log_message_level(self, level, fmt, *args):
        logger.log(level, "%s %s", self.address_string(), fmt % args)


class PdnsmgrdServer(wsgissl.SecureWSGIServer):

    def server_bind(self):
        """Override server_bind to not resolve the hostname.
        Basically undo the override in BaseHTTPServer.
        """
        SocketServer.TCPServer.server_bind(self)
        host, port = self.socket.getsockname()[:2]
        self.server_name = host
        self.server_port = port
        self.setup_environ()

    def handle_error(self, request, client_address):
        """Handle an error gracefully.

        We log the traceback and continue.
        """
        logger.exception('Exception happened during processing of request from %s', format_address(client_address))


class PackageManager(object):
    def __init__(self, refresh_command, install_upgrade_command, install_upgrade_version_command):
        self.refresh_command = refresh_command
        self.install_upgrade_command = install_upgrade_command
        self.install_upgrade_version_command = install_upgrade_version_command

    def refresh(self):
        cmdline = BECOME_ROOT + self.refresh_command
        check_output(cmdline)

    def install_upgrade(self, package, version=None):
        if not version:
            tpl = BECOME_ROOT + self.install_upgrade_command
        else:
            tpl = BECOME_ROOT + self.install_upgrade_version_command
        cmdline = []
        format_args = {'package': package, 'version': version}
        for part in tpl:
            cmdline.append(part.format(**format_args))
        return run_proc(cmdline)


class PackageManagerAPT(PackageManager):
    def __init__(self):
        PackageManager.__init__(
            self,
            ['apt-get', '-q', 'update'],
            ['DEBIAN_FRONTEND=noninteractive', 'apt-get', '-q', 'install', '-y', '{package}'],
            ['DEBIAN_FRONTEND=noninteractive', 'apt-get', '-q', 'install', '-y', '{package}=={version}']
        )


class PackageManagerYUM(PackageManager):
    def __init__(self):
        PackageManager.__init__(
            self,
            ['yum', 'makecache'],
            ['yum', 'install', '-d', '0', '-e', '0', '-y', '{package}'],
            ['yum', 'install', '-d', '0', '-e', '0', '-y', '--allow-downgrade', '{package}=={version}']
        )


def run_server(address, port, certfile, keyfile):
    if not address:
        address = '0.0.0.0'

    httpd = make_server(address, port, manager_app, server_class=PdnsmgrdServer, handler_class=PdnsmgrdRequestHandler)
    httpd.allow_reuse_address = True
    httpd.set_credentials(keyfile, certfile)

    logger.warning("Serving https://%s:%d/", address, port)
    httpd.serve_forever()


def setup_logging():
    fmt = '%(name)s: %(message)s'
    target = CONFIG.get('logging', 'target')
    if target == 'file':
        handler = logging.FileHandler(CONFIG.get('logging', 'file'))
        fmt = '%(asctime)-15s ' + fmt
    elif target == 'syslog':
        handler = logging.handlers.SysLogHandler(CONFIG.get('logging', 'syslog'))
        fmt = ('pdnsmgrd[%d]: ' % os.getpid()) + fmt
    elif target == 'console':
        handler = logging.StreamHandler(sys.stderr)
    else:
        raise StandardError('Please set up logging.target in configuration.')
    formatter = logging.Formatter(fmt, None)
    handler.setFormatter(formatter)
    logging.root.addHandler(handler)
    level = logging.INFO if CONFIG.getboolean('logging', 'log_requests') else logging.WARNING
    logging.root.setLevel(level)


def signal_hup(signum, frame):
    """close log files, for logrotate and similar uses"""
    logger.warning('SIGHUP received, closing logfiles')
    for handler in logging.root.handlers:
        if hasattr(handler, 'close') and callable(handler.close):
            handler.close()


def warn_if_root():
    msgs = """
Do NOT run pdnsmgrd as root.
Instead, run it as a separate user (suggestion: pdnsmgrd) and give restricted sudo permissions to the new user.
    """.strip().splitlines()

    if not (os.getuid() == 0):
        # not root, no need to warn
        return

    for line in msgs:
        print("WARNING: " + line, file=sys.stderr)
        if CONFIG.get('logging', 'target') != 'console':
            logger.warn(line)


if __name__ == '__main__':
    CONFIG.add_section('proxy')
    CONFIG.set('proxy', 'port', '8084')
    CONFIG.set('proxy', 'address', '127.0.0.1')
    CONFIG.add_section('logging')
    CONFIG.set('logging', 'target', 'syslog')
    CONFIG.set('logging', 'syslog', '/var/run/syslog' if platform.system() == 'Darwin' else '/dev/log')
    CONFIG.set('logging', 'log_requests', 'false')
    CONFIG.read("pdnsmgrd.conf")

    setup_logging()
    warn_if_root()

    UPSTREAM = UpstreamServer(CONFIG.items('upstream'))
    PACKAGE_MANAGER = PackageManagerAPT()

    signal.signal(signal.SIGHUP, signal_hup)

    run_server(
        CONFIG.get('proxy', 'address'),
        CONFIG.getint('proxy', 'port'),
        CONFIG.get('proxy', 'certfile'),
        CONFIG.get('proxy', 'keyfile')
    )
