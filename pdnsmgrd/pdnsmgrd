#!/usr/bin/env python

from __future__ import print_function

from wsgiref.simple_server import make_server
from wsgiref.util import request_uri

import wsgissl
from BaseHTTPServer import BaseHTTPRequestHandler
import SocketServer
import base64
import ConfigParser
import urlparse
import urllib2
import json
import subprocess
import tempfile
import os
import collections

BECOME_ROOT = ['sudo', '-n']

STARTSTOP_COMMAND = {'start': 'start', 'stop': 'stop', 'restart': 'restart'}

CONFIG = ConfigParser.ConfigParser()

Request = collections.namedtuple('Request', ['environ', 'args', 'path', 'method', 'body'])

class UpstreamServer(object):
    def __init__(self, config):
        config = dict(config)
        self.daemon_type = config['daemon_type'].lower()
        if self.daemon_type == 'recursor':
            self.package = 'pdns-recursor'
            self.service = 'pdns-recursor'
            self.config = '/etc/powerdns/recursor.conf'
            self.url = 'http://localhost:8082'
        elif self.daemon_type == 'authoritative':
            self.package = 'pdns-server'
            self.service = 'pdns'
            self.config = '/etc/powerdns/powerdns.conf'
            self.url = 'http://localhost:8081'
        else:
            raise 'Unknown daemon_type %r' % self.daemon_type

        self.package = config.get('package', self.package)
        self.service = config.get('service', self.service)
        self.config = config.get('config', self.config)
        self.url = config.get('url', self.url)
        self.url = self.url.rstrip('/') # strip last /


def check_output(*popenargs, **kwargs):
    r"""Run command with arguments and return its output as a byte string.

    Backported from Python 2.7 as it's implemented as pure python on stdlib.
    from https://gist.github.com/1027906

    >>> check_output(['/usr/bin/python', '--version'])
    Python 2.6.2
    """
    process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
    output = process.communicate()[0]
    retcode = process.poll()
    if retcode:
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        error = subprocess.CalledProcessError(retcode, cmd)
        error.output = output
        raise error
    return output


class ExposedException(Exception):

    def __init__(self, message, status=500, headers=None):
        if message is None:
            message = BaseHTTPRequestHandler.responses[status][1]
        Exception.__init__(self, message)
        self.status = status
        self.headers = headers
        if headers is None:
            self.headers = []


class NotFoundException(ExposedException):

    def __init__(self):
        ExposedException.__init__(self, None, status=404)


class AuthenticationRequiredException(ExposedException):

    def __init__(self, www_auth):
        ExposedException.__init__(self, None, status=401, headers=[('WWW-Authenticate', www_auth)])


class Response(object):

    def __init__(self, content, content_type='text/plain', headers=None, status=200):
        self.content = content
        self.content_type = content_type
        self.headers = headers
        if self.headers is None:
            self.headers = []
        self.status = status

    def start(self, start_response):
        status = self.status
        if not isinstance(status, str):
            status = str(status) + ' ' + BaseHTTPRequestHandler.responses[status][1]
        headers = [
            ('Content-Type', self.content_type),
            ('Access-Control-Allow-Origin', CONFIG.get('proxy', 'allow_origin')),
            ('Server', 'Manager/0')
            ] + self.headers
        start_response(status, headers)
        return [self.content]


class JSONResponse(Response):

    def __init__(self, data, callback=None, headers=None):
        content = json.dumps(data)
        content_type = 'application/json'
        if callback is not None:
            content_type = 'application/javascript'
            content = callback + '(' + content + ');'
        Response.__init__(self, content, content_type=content_type, headers=headers)


class ExceptionResponse(Response):

    def __init__(self, ex):
        Response.__init__(self, str(ex), status=ex.status, headers=ex.headers)


def run_proc(cmdline):
    status = {'success': True, 'cmdline': cmdline}
    try:
        status['output'] = check_output(cmdline, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as ex:
        status['success'] = False
        status['returncode'] = ex.returncode
        status['output'] = ex.output
    return status


def do_start_stop_restart(action):
    cmdline = BECOME_ROOT + ['service', UPSTREAM.service, STARTSTOP_COMMAND[action]]
    return run_proc(cmdline)


def do_install_upgrade(version):
    cmdline = BECOME_ROOT + ['apt-get', 'update']
    check_output(cmdline)
    pkg = UPSTREAM.package
    if len(version) > 0:
        pkg = pkg + '==' + version
    cmdline = BECOME_ROOT + ['apt-get', 'install', '-y', pkg]
    return run_proc(cmdline)


def do_configure(config):
    (tfhandle, tfname) = tempfile.mkstemp()
    tf = os.fdopen(tfhandle, 'w')
    tf.write(config)
    tf.close()
    cmdline = BECOME_ROOT + ['cp', tfname, UPSTREAM.config]
    status = run_proc(cmdline)
    os.unlink(tfname)
    return status


def handle_route_do(action, args):
    if action in ['start', 'stop', 'restart']:
        return do_start_stop_restart(action)
    if action in ['install', 'upgrade']:
        version = args.get('version', [''])[0]
        return do_install_upgrade(version)
    if action == 'configure':
        config = str(args['config'][0])
        if len(config) < 5:
            raise ExposedException('invalid config')
        return do_configure(config + "\n")

    raise ExposedException('unknown action')


def handle_route_servers(request):
    url = UPSTREAM.url + request.path + '?' + request.environ['QUERY_STRING']

    data = None
    if request.method == 'POST':
        data = request.body

    result = ''
    try:
        conn = urllib2.urlopen(url, data, timeout=5)
        result = conn.read()
        conn.close()
    except urllib2.HTTPError as ex:
        raise ExposedException(ex.reason, status=ex.code)

    headers = ((k.lower().strip(), v.strip()) for (k, v) in [h.split(': ', 1) for h in conn.info().headers])
    content_type = [v for (k, v) in headers if k == 'content-type'][0]
    response = Response(result, content_type=content_type)

    return response


def authenticate(auth_data):
    expected_username = CONFIG.get('auth', 'username', None)
    expected_password = CONFIG.get('auth', 'password', None)
    if not expected_username or not expected_password:
        raise Exception('no username or password configured')

    if auth_data is None or ' ' not in auth_data:
        # no auth data supplied by client
        return False

    (client_method, client_credentials_encoded) = auth_data.split(' ', 2)
    if client_method != 'Basic':
        # unsupported auth method
        return False

    client_credentials = base64.b64decode(client_credentials_encoded)
    (client_username, client_password) = client_credentials.split(':', 2)
    if client_username == expected_username and client_password == expected_password:
        return True
    else:
        return False


def route(request):
    if not authenticate(request.environ.get('HTTP_AUTHORIZATION', '')):
        raise AuthenticationRequiredException('Basic realm="manager"')

    callback = request.args.get('_callback', [None])[0]

    if request.path == '/do':
        action = request.args.get('action', [None])[0]
        if action is None:
            raise NotFoundException()

        return JSONResponse(handle_route_do(action, request.args), callback=callback)

    elif request.path.startswith('/servers'):
        return handle_route_servers(request)

    else:
        raise NotFoundException()


def manager_app(environ, start_response):
    path = request_uri(environ)
    parsed_path = urlparse.urlparse(path)
    method = environ['REQUEST_METHOD']
    args = {}
    request_body = ''
    if method == 'POST':
        request_body_size = int(environ['CONTENT_LENGTH'])
        request_body = str(environ['wsgi.input'].read(request_body_size))
        args = urlparse.parse_qs(request_body)
    else:
        args = urlparse.parse_qs(parsed_path.query)

    try:
        path = '/'.join([component for component in parsed_path.path.split('/') if component != ''])
        if '..' in path:
            raise NotFoundException()

        path = '/' + path
        request = Request(environ=environ, path=path, args=args, method=method, body=request_body)

        response = route(request)

    except ExposedException as ex:
        response = ExceptionResponse(ex)

    return response.start(start_response)


class PdnsmgrdRequestHandler(wsgissl.SecureWSGIRequestHandler):

    def address_string(self):
        """Override address_string to not resolve the client address."""
        return str(self.client_address[0])


class PdnsmgrdServer(wsgissl.SecureWSGIServer):

    def server_bind(self):
        """Override server_bind to not resolve the hostname.
        Basically undo the override in BaseHTTPServer.
        """
        SocketServer.TCPServer.server_bind(self)
        host, port = self.socket.getsockname()[:2]
        self.server_name = host
        self.server_port = port
        self.setup_environ()


def run_server(address, port):
    if not address:
        address = '0.0.0.0'

    httpd = make_server(address, port, manager_app, server_class=PdnsmgrdServer, handler_class=PdnsmgrdRequestHandler)
    httpd.allow_reuse_address = True
    httpd.set_credentials(keyfile, certfile)

    print("Serving https://%s:%d/ ..." % (address, port))
    httpd.serve_forever()


if __name__ == '__main__':
    CONFIG.add_section('proxy')
    CONFIG.set('proxy', 'port', '8080')
    CONFIG.set('proxy', 'address', '127.0.0.1')
    CONFIG.read("pdnsmgrd.conf")
    UPSTREAM = UpstreamServer(CONFIG.items('upstream'))

    run_server(
        CONFIG.get('proxy', 'address'),
        CONFIG.getint('proxy', 'port'),
        CONFIG.get('proxy', 'certfile'),
        CONFIG.get('proxy', 'keyfile')
    )
