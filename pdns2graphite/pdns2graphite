#!/usr/bin/env python
# Jan-Piet Mens <jpmens(at)gmail.com>

import sys
import os
import requests
import json
import time
import socket
import urlparse
import logging

auth = [ 
        'corrupt-packets',
        'latency',
        'packetcache-hit',
        'packetcache-miss',
        'packetcache-size',
        'query-cache-hit',
        'query-cache-miss',
        'qsize-q',
        'recursing-answers',
        'recursing-questions',
        'servfail-packets',
        'tcp-answers',
        'tcp-queries',
        'timedout-packets',
        'udp-answers', 
        'udp-queries', 
        'udp4-answers',
        'udp4-queries',
        'udp6-answers',
        'udp6-queries'
        ]
recursor = [    # http://doc.powerdns.com/recursor-stats.html
		"all-outqueries",
		"answers0-1",
		"answers100-1000",
		"answers10-100",
		"answers1-10",
		"answers-slow",
		"cache-bytes",
		"cache-entries",
		"cache-hits",
		"cache-misses",
		"chain-resends",
		"client-parse-errors",
		"concurrent-queries",
		"dlg-only-drops",
		"dont-outqueries",
		"ipv6-outqueries",
		"max-mthread-stack",
		"negcache-entries",
		"noerror-answers",
		"nsspeeds-entries",
		"nsset-invalidations",
		"nxdomain-answers",
		"outgoing-timeouts",
		"over-capacity-drops",
		"packetcache-bytes",
		"packetcache-entries",
		"packetcache-hits",
		"packetcache-misses",
		"qa-latency",
		"questions",
		"resource-limits",
		"server-parse-errors",
		"servfail-answers",
		"spoof-prevents",
		"sys-msec",
		"tcp-client-overflow",
		"tcp-outqueries",
		"tcp-questions",
		"throttled-out",
		"throttle-entries",
		"unauthorized-tcp",
		"unauthorized-udp",
		"unexpected-packets",
		"uptime",
		"user-msec"
   ]

config = {
    'serverlist_url'    : 'http://localhost',
    'carbon_server'     : '127.0.0.1',
    'carbon_port'       : 2003,
    'carbon_delay'      : 5,
}

logging.basicConfig()
logger = logging.getLogger('pdns2graphite')

def send_it(message):

    try:
        sock = socket.socket()
        sock.connect((config['carbon_server'], config['carbon_port']))
        sock.sendall(message)
        sock.close()
    except socket.error:
        logger.warning("Can't connect to Carbon server at %s:%s, dropping message", config['carbon_server'], config['carbon_port'], exc_info=True)

def nowtics():
    return int(time.time())

def getserverlist(serverlist_url):
    global config
    try:
        r = requests.get(serverlist_url, auth=(config['pdnscontrol_user'],config['pdnscontrol_pass']))
    except requests.exceptions.RequestException:
        logger.error('error fetching server list', exc_info=True)
        return []

    try:
        s = json.loads(r.text)
    except ValueError:
        logger.error('error decoding server list', exc_info=True)
        return []

    return s['servers']

def graph_server(url, type, keys, node):
    global config

    logger.debug('getting stats for %s server %s (%s)', type, node, url)
    node = node.replace('.', '-')

    try:
        r = requests.get(url, auth=(config['pdnscontrol_user'],config['pdnscontrol_pass']))
    except requests.exceptions.RequestException:
        logger.error('error fetching stats from %s', url, exc_info=True)
        return

    try:
        stats = json.loads(r.text)
    except ValueError:
        logger.error('error decoding stats from %s', url, exc_info=True)
        return

    timestamp = nowtics()
    lines = []

    for s in keys:
        if s in stats:
            lines.append("pdns.%s.%s.%s %s %d" % (node, type, s, stats[s], timestamp))

    message = '\n'.join(lines) + '\n'
    logger.debug('carbon message: %s', message)
    send_it(message)

def sleepuntil(ts):
    now = time.time()
    if now > ts:
        logger.warning('no sleep between loops, increase interval?')
        return
    time.sleep(ts-now)

def main():
    global config

    configfile = '../instance/pdnscontrol.conf'

    if len(sys.argv) == 2:
        configfile = sys.argv[1]

    try:
        execfile(configfile, config)
    except IOError:
        sys.exit("%s: Can't load configuration file `%s'" % (sys.argv[0], configfile))
    except:
        sys.exit("%s: Syntax error in configuration file `%s'" % (sys.argv[0], configfile))

    if 'pdnscontrol_user' not in config or 'pdnscontrol_pass' not in config:
        sys.exit("%s: Need pdnscontrol_{user|pass} in configuration" % (sys.argv[0]))

    logger.warning('starting up with serverlist %s', config['serverlist_url'])
    while True:
        lastpoll = time.time()
        logger.debug('polling')
        for server in getserverlist(config['serverlist_url']):
            url = server['url']
            if 'type' in server:
                url = urlparse.urljoin(url, 'stats')
                if server['type'] == 'Authoritative':
                    statlist = auth
                    type = 'auth'
                else:
                    statlist = recursor
                    type = 'recursor'
            graph_server(url, type, statlist, server['name'])
        sleepuntil(lastpoll + float(config['carbon_delay']))

if __name__ == '__main__':
    main()
